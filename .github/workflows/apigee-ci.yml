# This workflow will run tests using node and then publish a package to GitHub Packages when code pushed to specifc branch and deploy to Apigee

 

name: Apigee CICD Using Maven

 

# Controls when the action will run. Workflow runs when manually triggered using the UI or API.

#on:

#  workflow_dispatch:

 

#beloe command is deploy the code automatically when release version created and code merged  

#on:

#  release:

#    types: [created]

 

#beloe command is deploy the code automatically when push the code to specific branch

on: push

#branches: [ "release/dev" ]

 

env:

  DEPLOYMENT_NAME: Apigee CICD Test # TODO: update to deployment name

 

  # Default Target Apigee Organization et environment (can be also be dynamically defined in [Set Variables *] steps)

  APIGEE_ORG: ${{ secrets.APIGEE_ORG }}

  APIGEE_ENV: ${{ secrets.APIGEE_ENV }}

  API_VERSION: ${{ secrets.API_VERSION }}

  PROJECT_ID: ${{ secrets.PROJECT_ID }}

  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

  WORKFLOW_IDENTITY_FEDERATION_NAME: ${{ secrets.WORKFLOW_IDENTITY_FEDERATION_NAME }}

  AUTHOR_EMAIL: 'rajeshjanapati@gmail.com'

  APIGEE_DEPLOYMENT_SUFFIX: 'relase_dev'

  APIGEE_BUILD_DEPLOYMENT_SUFFIX: 'apigee_relase_dev'

 

jobs:

#Node Build section

  # node-build:

  #   runs-on: ubuntu-latest

 

  #   permissions:

  #     contents: 'read'

  #     id-token: 'write'

 

  #   steps:

  #     - uses: actions/checkout@v3

  #     - uses: actions/setup-node@v3

 

  #   # Install dependencies (npm)

  #     - name: Install Dependencies

  #       run: npm install --silent --no-fund

 

    # Run eslint test + upload artifact (eslint-out.html)

    # - name: eslint

    #   run : ./node_modules/eslint/bin/eslint.js -c ./.eslintrc-jsc.yml --format html ./apiproxy/resources/jsc > ./eslint-out.html

 

    # # Run apigeeLint test + upload artifact (apigeelint-out.html)

    #   - name: apigeelint

    #     run: ./node_modules/apigeelint/cli.js -s ./apiproxy -f html.js -e PO013,PO025 > ./apigeelint-out.html

 

#Apigee Build section

  apigee-build:

    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    # Setup Maven & Maven Cache

      - name: Set up JDK 20.0.0

        uses: actions/setup-java@v3

        with:

          distribution: 'temurin'

          java-version: 20.0.0

 

      - name: Cache the Maven packages to speed up build

        uses: actions/cache@v3

        with:

          path: ~/.m2

          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

          restore-keys: ${{ runner.os }}-m2   

 

    # Configure Workload Identity Federation and generate an access token.

      - name: 'Authenticate to Google Cloud'
        uses: actions/checkout@v3

      - id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          # create_credentials_file: true
          # activate_credentials_file: true
          workload_identity_provider: 'projects/127369686749/locations/global/workloadIdentityPools/github-test/providers/github-test'
          service_account: 'workload-identity-federation@esi-apigee-x-394004.iam.gserviceaccount.com'
          run: |-
            echo TOKEN: '${{steps.secrets.outputs.token}}'

 

    # Deploy Apigee Config (Apigee [Config] Maven plugin)

      - name: mvn deploy config xhybrid

        # if: env.API_VERSION == 'googleapi'

        run:  |

          mvn install -q -Pgoogleapi -Dapigee.org=$APIGEE_ORG -Denv=$APIGEE_ENV -Dfile=/home/runner/work/apigee/apigee/*.json -Dapigee.options=async

 

    # Package & Deploy Apigee proxy (Apigee [Deploy] Maven plugin)

      - name: mvn package

        run: mvn process-resources -P$API_VERSION -Dcommit=$GIT_COMMIT -Dbranch=$GIT_BRANCH -Dauthor=$AUTHOR_EMAIL -Ddeployment.suffix=$APIGEE_DEPLOYMENT_SUFFIX

 

    # Package & Deploy Apigee Config Env Variables such as KVM, Target Servers, App Product (Apigee [Deploy] Maven plugin)

      - name: mvn config

        run: mvn apigee-enterprise:configure -q -P$API_VERSION -Dorg=$APIGEE_ORG -Denv=$APIGEE_ENV  -Ddeployment.suffix=$APIGEE_DEPLOYMENT_SUFFIX

 

      - name: mvn deploy proxy xhybrid

        # if: env.API_VERSION == 'googleapi'

        # run: mvn apigee-enterprise:deploy -q -Pdev -Denv=eval -Dbearer="Bearer ${{steps.auth.outputs.access_token}}" -Dorg=esi-apigee-x-394004
        # run: mvn apigee-enterprise:deploy -q -Pdev -Denv=eval -Dbearer=ya29.a0AfB_byB51wYYaAobvefvwDva4Y134gf-Q1sKoiaibZMS9UPXYuiEv3KeSDwj06bvBNQ_OGKH9WIMKcinayPFaD2dNVAz_GQEcXAP5TuhYse5hzDow5RyXPzQJr19Q2rPe4Ij3dD90hQNmCzHt2vzrthewlrMvWmYC7an0Hpzntbq1a8aCgYKAd4SARESFQHsvYls0ww5dBkU9szHzZ9RSlCUIg0182 -Dorg=esi-apigee-x-394004
        run: mvn apigee-enterprise:deploy -q -Pdev -Denv=eval -Dbearer=${{steps.auth.outputs.access_token}} -Dorg=esi-apigee-x-394004
        # run: mvn clean install -Pdev -Denv=eval -Dbearer=${{steps.auth.outputs.access_token}} -DgoogleTokenEmail=apigee-github@esi-apigee-x-394004.iam.gserviceaccount.com -Dorg=esi-apigee-x-394004
 
