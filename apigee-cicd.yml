# This workflow will run tests using node and then publish a package to GitHub Packages when code pushed to specifc branch and deploy to Apigee

name: Apigee CICD Using Maven

# Controls when the action will run. Workflow runs when manually triggered using the UI or API.
#on:
#  workflow_dispatch:

#beloe command is deploy the code automatically when release version created and code merged
#on:
#  release:
#    types: [created]

#beloe command is deploy the code automatically when push the code to specific branch
on: push
#branches: [ "release/dev" ]

env:
  DEPLOYMENT_NAME: Apigee CICD Test # TODO: update to deployment name

  # Default Target Apigee Organization et environment (can be also be dynamically defined in [Set Variables *] steps)
  APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
  APIGEE_ENV: ${{ secrets.APIGEE_ENV }}
  API_VERSION: ${{ secrets.API_VERSION }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  WORKFLOW_IDENTITY_FEDERATION_NAME: ${{ secrets.WORKFLOW_IDENTITY_FEDERATION_NAME }}
  AUTHOR_EMAIL: 'pavan.sirasanambedu@gmail.com'
  APIGEE_DEPLOYMENT_SUFFIX: 'relase_dev'
  APIGEE_BUILD_DEPLOYMENT_SUFFIX: 'apigee_relase_dev'

jobs:
  #Node Build section
  apigee-config-build:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

   # Create Dependencies (npm) Cache
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm`
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

    # Install dependencies (npm)
      - name: Install Dependencies
        run: npm install --silent --no-fund

    # Run apigeeLint test + upload artifact (apigeelint-out.html)
      - name: apigeelint
        run: ./node_modules/apigeelint/cli.js -s ./apiproxy -f html.js -e PO013,PO025 > ./apigeelint-out.html

      - name: Archive Apigeelint results
        uses: actions/upload-artifact@v3
        with:
          name: apigeelint-report
          path: ./apigeelint-out.html
          retention-days: 5

  # Run eslint test + upload artifact (eslint-out.html)
      - name: eslint
        run : ./node_modules/eslint/bin/eslint.js -c ./.eslintrc-jsc.yml --format html ./apiproxy/resources/jsc > ./eslint-out.html

      - name: Archive esLint results
        uses: actions/upload-artifact@v3
        with:
          name: eslint-report
          path: ./eslint-out.html
          retention-days: 5

    # Setup Maven & Maven Cache
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 8

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

    # Configure Workload Identity Federation and generate an access token.
      - id: 'auth'
        name: 'Authenticate to Google Apigee Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/127369686749/locations/global/workloadIdentityPools/pavan-apigee-git/providers/pavan-apigee-git'
          service_account: 'workload-identity-federation@esi-apigee-x-394004.iam.gserviceaccount.com'

    # Maven Package & Upload Apigee proxy
      - name: mvn package
        run: mvn process-resources -q -Pproxy_de -Dcommit=$GIT_COMMIT -Dbranch=$GIT_BRANCH -Dauthor=$AUTHOR_EMAIL

    # Maven Package & Upload Apigee Budle Config in Apigee
      - name: mvn config
        run: mvn apigee-enterprise:configure -q -Pproxy_de -Dorg=$APIGEE_ORG -Denv=$APIGEE_ENV

    # Maven Deploy uploaded proxy package in to Apigeee
      - name: mvn deploy proxy xhybrid
        run: mvn apigee-enterprise:deploy -q -Pproxy_de -Dbearer=${{ steps.auth.outputs.access_token }}

    # Maven Deploy Apigee Config
      - name: mvn deploy config xhybrid
        run: mvn install -q -Pconfig_de -Dbearer=${{ steps.auth.outputs.access_token }} -Dapigee.config.file=ApigeeConfig/apigee.json -Dapigee.config.options=update
